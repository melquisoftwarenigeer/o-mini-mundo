name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop  # permite que pushes em develop também disparem a pipeline
  pull_request:
    branches:
      - main
      - develop  # ativa a pipeline quando houver PRs para develop

jobs:
  #Job de build e testes da aplicação Laravel
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Clona o repositório
      - name: Check out the code
        uses: actions/checkout@v2

      #Caching de dependências para acelerar o tempo de execução  
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Passo 2: Configura ambiente PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, bcmath, zip, pdo, pdo_sqlite
          coverage: xdebug

      # Passo 3: Instala dependências PHP
      - name: Install PHP dependencies
        run: |
          composer install --no-interaction --prefer-dist

      # Passo 4: Define ambiente de testes
      - name: Set environment file to testing
        run: |
          cp .env.testing.example .env

      # Passo 5: Configura Node.js (para Vite)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Passo 6: Instala dependências frontend
      - name: Install front-end dependencies
        run: |
          npm install

      # Passo 7: Gera arquivos estáticos (Vite)
      - name: Build front-end assets
        run: |
          npm run build

      # Passo 8: Garante existência do SQLite
      - name: Create SQLite database if not exists
        run: |
          touch database/database.sqlite

      # Passo 9: Roda migrações e testes
      - name: Run migrations and tests
        run: |
          php artisan key:generate --env=testing
          php update-jwt-secret.php
          php artisan migrate
          php artisan test

  # Job de build/push da imagem Docker (executado só se os testes passarem)
    # Job de build/push da imagem Docker (executado só se os testes passarem)
  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: build  # Só roda se o job 'build' anterior for bem-sucedido

    steps:
      # Clona o repositório (necessário pois cada job é executado em um runner limpo)
      - name: Checkout repository
        uses: actions/checkout@v2

      # Ativa o Docker Buildx, que é uma ferramenta para builds avançados com cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Faz login no Docker Hub usando secrets armazenados no GitHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Cache para camadas Docker: salva em /tmp/.buildx-cache
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Builda e envia a imagem Docker com suporte a cache
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/php/Dockerfile
          push: true
          tags: melquidocker/o-mini-mundo:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
